import os
import django


os.environ.setdefault("DJANGO_SETTINGS_MODULE", "system.settings")
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()


import logging
from aiogram import Bot, Dispatcher, executor, types
from environs import Env
import keyboards as kb
from mainapp.models import CityInfo


env = Env()
env.read_env()


logging.basicConfig(level=logging.INFO)
bot = Bot(token=env('BOT_TOKEN'))
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–æ—Ä–æ–¥–∞.", reply_markup=kb.start_kb)


@dp.message_handler()
async def echo(message: types.Message):
    sent_answer = False
    check_city = CityInfo.objects.filter(city_name__icontains=message.text)
    if check_city and check_city.count() != 1:
        await message.answer("–°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                             reply_markup=kb.get_city_by_name(check_city))
        sent_answer = True
    if check_city and check_city.count() == 1:
        check_city = check_city.first()
        await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {check_city.city_name}\n"
                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è: {check_city.population}\n"
                             f"–°—Å—ã–ª–∫–∞ –Ω–∞ wiki: {check_city.url}")
        sent_answer = True
    if not sent_answer:
        if message.text == "üåÜ –ì–æ—Ä–æ–¥–∞":
            await message.answer("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
                                 reply_markup=kb.get_all_cities_keyboard())
        else:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
